(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const c of o)if(c.type==="childList")for(const l of c.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&s(l)}).observe(document,{childList:!0,subtree:!0});function r(o){const c={};return o.integrity&&(c.integrity=o.integrity),o.referrerPolicy&&(c.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?c.credentials="include":o.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function s(o){if(o.ep)return;o.ep=!0;const c=r(o);fetch(o.href,c)}})();document.querySelector("#app").innerHTML=`
  <div class="game-container">
    <div class="score-container">
      <span id="score">Score: 0</span>
    </div>
    <div class="game-grid">
        <!-- Game tiles will be dynamically added here -->
    </div>
    <button id="resetBtn" class="reset-button">Reset Game</button>
  </div>
`;const w=document.querySelector(".game-grid"),g=document.querySelector("#score"),y=document.querySelector("#resetBtn"),i=4;let u=0,n=[];function h(){u=0,g.textContent=`Score: ${u}`;for(let t=0;t<i;t++){n[t]=[];for(let e=0;e<i;e++){n[t][e]=0;const r=document.createElement("div");r.classList.add("tile"),r.dataset.row=t,r.dataset.col=e,w.appendChild(r)}}d(),d(),f()}y.addEventListener("click",()=>{n=[],w.innerHTML="",h()});function d(){const t=[];for(let e=0;e<i;e++)for(let r=0;r<i;r++)n[e][r]===0&&t.push({row:e,col:r});if(t.length>0){const{row:e,col:r}=t[Math.floor(Math.random()*t.length)];n[e][r]=Math.random()<.9?2:4,document.querySelector(`.tile[data-row="${e}"][data-col="${r}"]`).classList.add("new")}}function f(){document.querySelectorAll(".tile").forEach(e=>{const r=e.dataset.row,s=e.dataset.col,o=n[r][s];e.textContent=o===0?"":o,e.dataset.value=o,e.addEventListener("animationend",()=>{e.classList.remove("new")}),e.classList.contains("merge")&&e.addEventListener("animationend",()=>{e.classList.remove("merge")});const c=90;e.style.top=`${r*c+10}px`,e.style.left=`${s*c+10}px`})}function m(t){u+=t,g.textContent=`Score: ${u}`}document.addEventListener("keydown",L);function L(t){switch(t.key){case"ArrowUp":R();break;case"ArrowDown":S();break;case"ArrowLeft":G();break;case"ArrowRight":b();break;default:return}a&&(d(),f()),M()&&alert("Game Over!")}function p(t){const e=t.filter(o=>o!==0),r=[];let s=0;for(let o=0;o<e.length;o++)e[o]===e[o+1]?(r.push(e[o]*2),s+=e[o]*2,o++):r.push(e[o]);for(;r.length<i;)r.push(0);return{mergedRow:r,scoreGained:s}}let a=!1;function R(){a=!1;let t=0;for(let e=0;e<i;e++){const r=n.map(c=>c[e]),{mergedRow:s,scoreGained:o}=p(r);v(r,s)||(a=!0),n.forEach((c,l)=>{n[l][e]=s[l]}),t+=o}a&&(m(t),d(),f())}function S(){a=!1;let t=0;for(let e=0;e<i;e++){const r=n.map(c=>c[e]).reverse(),{mergedRow:s,scoreGained:o}=p(r);v(r,s.reverse())||(a=!0),n.forEach((c,l)=>{n[l][e]=s[l]}),t+=o}a&&(m(t),d(),f())}function G(){a=!1;let t=0;for(let e=0;e<i;e++){const{mergedRow:r,scoreGained:s}=p(n[e]);v(n[e],r)||(a=!0),n[e]=r,t+=s}a&&(m(t),d(),f())}function b(){a=!1;let t=0;for(let e=0;e<i;e++){const s=n[e].slice().reverse(),{mergedRow:o,scoreGained:c}=p(s);v(s,o)||(a=!0),n[e]=o.reverse(),t+=c}a&&(m(t),d(),f())}function v(t,e){return t.every((r,s)=>r===e[s])}function M(){for(let t=0;t<i;t++)for(let e=0;e<i;e++)if(n[t][e]===0||t>0&&n[t][e]===n[t-1][e]||t<i-1&&n[t][e]===n[t+1][e]||e>0&&n[t][e]===n[t][e-1]||e<i-1&&n[t][e]===n[t][e+1])return!1;return!0}h();
